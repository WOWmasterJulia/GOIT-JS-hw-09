{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,MAAO,QACPC,SAAU,YACVC,SAAU,QACVC,QAAS,IAkCX,SAASC,EAAcH,EAAUI,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EAEFF,EAAQ,C,SAAEN,E,MAAUI,IAGpBG,EAAO,C,SAAEP,E,MAAUI,GAAQ,GAE5BA,EAAM,G,CAtCEQ,SAASC,cAAc,SAC/BC,iBAAiB,UAExB,SAAoBC,GAClBA,EAAIC,iBACJ,IAAIC,EAAQC,OAAOH,EAAII,cAAcC,SAAShB,MAAMiB,OACpD,MAAMC,EAAOJ,OAAOH,EAAII,cAAcC,SAASE,KAAKD,OAC9CE,EAASL,OAAOH,EAAII,cAAcC,SAASG,OAAOF,OAExD,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAIlBrB,EAAAqB,EAAGP,GACdQ,MAAK,EAACzB,SAAEA,EAAQI,MAAEA,MACjBsB,QAAQC,IAAI,uBAAqB3B,QAAiBI,OAClDR,EAAAF,GAASG,OAAO+B,QAAQ,qBAAqB5B,QAAeI,MAAU,IAEvEyB,OAAM,EAAC7B,SAAEA,EAAQI,MAAEA,MAClBsB,QAAQC,IAAI,sBAAoB3B,QAAeI,OAC/CR,EAAAF,GAASG,OAAOiC,QAAQ,oBAAoB9B,QAAeI,MAAU,IAEzEa,GAAgBK,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  width: '280px',\n  position: 'right-top',\n  distance: '130px',\n  opacity: 1,\n  // ...\n});\n\n\n\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', genPromise);\n\nfunction genPromise(evt) {\n  evt.preventDefault();\n  let delay = Number(evt.currentTarget.elements.delay.value);\n  const step = Number(evt.currentTarget.elements.step.value);\n  const amount = Number(evt.currentTarget.elements.amount.value);\n  \n  for (let i = 1; i <= amount; i += 1) {\n    // \n    \n    // Надо вызывать ф-ю createPromise:\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delay = delay + step;\n  }\n  // evt.currentTarget.reset();\n  // console.log(delay, step, amount);\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};\n\n"],"names":["$7Y9D8","parcelRequire","$parcel$interopDefault","Notify","init","width","position","distance","opacity","$47d4ff9957288465$var$createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","delay1","Number","currentTarget","elements","value","step","amount","i","then","console","log","success","catch","failure"],"version":3,"file":"03-promises.c7e57bd5.js.map"}