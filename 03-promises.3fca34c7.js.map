{"mappings":"oeAAAA,EAAA,SAkCO,IAAIC,SAAQ,CAACC,EAASC,KASLC,KAAKC,QARO,IAIjCC,MAAKC,GAASC,QAAQC,IAAIF,KAC1BG,OAAMC,GAASH,QAAQC,IAAIE","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// const formEl = document.querySelector('.form');\n// // const  input= document.querySelector('.form delay');\n\n// const createPromise = (position, delay) => {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n  \n//     if (shouldResolve) {\n//       resolve(\"Yes\");\n//     } else {\n//       reject(\"No\");\n//     }\n//     return\n//   });\n// }\n\n// createPromise()\n//   .then(value => console.log(value))\n//   .catch(error => console.log(error));\n\n\n\nfunction El(first, delay, amount) {\nreturn new Promise((resolve, reject) => {\nconst param = createPromise(2, 1500)\n});\n}\nEl(3, 500, 4)\n  .then(value => console.log(value))\n  .catch(error => console.log(error));\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["parcelRequire","Promise","resolve","reject","Math","random","then","value","console","log","catch","error"],"version":3,"file":"03-promises.3fca34c7.js.map"}